import numpy as np
import pandas as pds
from keras.models import Sequential
from keras.layers import Input, Dense, Dropout, BatchNormalization
from keras.wrappers.scikit_learn import KerasRegressor
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_squared_error
from sklearn.datasets import load_diabetes
import os
import numpy.random as random
import scipy as sp
import pandas as pd
from pandas import Series, DataFrame
from sklearn.model_selection import train_test_split
os.chdir('D:/kenkyu/HOMOLUMO')
os.getcwd()
df = pd.read_excel('AP.xlsx')
df.dropna(inplace = True)
df.isnull().sum()
X = df.drop('HOMOLUMO', axis=1)
Y = df['HOMOLUMO']
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.3, random_state=0)

def reg_model():
    model = Sequential()
    model.add(Dense(10, input_dim=10, activation='relu'))
    model.add(Dense(16, activation='relu'))
    model.add(Dense(1))
    model.compile(loss='mean_squared_error', optimizer='adam')
    return model
    X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.1, random_state=0)
　　estimator = KerasRegressor(build_fn=reg_model, epochs=100, batch_size=10, verbose=0)
　　estimator.fit(X_train, y_train)
　　y_pred = estimator.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    print("KERAS REG RMSE : %.2f" % (mse ** 0.5))
    seed = 7
    np.random.seed(seed)
    estimator = KerasRegressor(build_fn=reg_model, epochs=100, batch_size=10, verbose=0)
    kfold = KFold(n_splits=10, random_state=seed)
    results = cross_val_score(estimator, X, Y, scoring='neg_mean_squared_error', cv=kfold)
    mse = -results.mean()
    print("KERAS REG RMSE : %.2f" % (mse ** 0.5))
