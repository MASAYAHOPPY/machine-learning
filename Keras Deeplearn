import numpy as np
from tensorflow.keras.models import Sequential, model_from_json
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import RMSprop
import os
import numpy as np
import numpy.random as random
import scipy as sp
import pandas as pd
from pandas import Series, DataFrame
from sklearn.model_selection import train_test_split
os.chdir('D:/kenkyu/Padeldata54010/last/')
os.getcwd()
df = pd.read_excel('ES.xlsx')

df.drop(['T3','T2','T1'], axis=1,inplace=True)
df.isnull().sum()
df.dropna(inplace = True)
df.isnull().sum()
X = df.drop('BV', axis=1)
Y = df['BV']
X=X.astype('str')
Y=Y.astype('str')

def main():
 X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.3, random_state=0)ã€€
 model = Sequential()
 model.add(Dense(activation='sigmoid', input_dim=2, units=3))
 model.add(Dense(units=2, activation='sigmoid'))
 model.compile(loss='mean_squared_error', optimizer=RMSprop(), metrics=['accuracy'])
 history = model.fit(X_train, y_train, batch_size=4, epochs=3000)
 test_loss, test_acc = model.evaluate(X_train, y_train, verbose=0)
 print('test_loss:', test_loss) 
 print('test_acc:', test_acc)
 predict_y = model.predict(x_test)
 print("y_test:", y_test)  
 print("predict_y:", predict_y) 
 threshold = 0.5
 print("thresholded predict_y:", (predict_y > threshold).astype(np.int)
 
if __name__ == '__main__':
    main()

 
