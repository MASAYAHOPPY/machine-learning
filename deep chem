pip uninstall scikit-learn
pip install scikit-learn==0.22
pip install tensorflow==1.14 
pip3 uninstall numpy==1.17.2
pip3 install numpy==1.16.4
conda install -c rdkit -c conda-forge rdkit deepchem==2.3.0
#事前準備

import tensorflow as tf
import deepchem as dc
import numpy as np
import os
import numpy as np
import numpy.random as random
import scipy as sp
import pandas as pd
from pandas import Series, DataFrame
from sklearn.model_selection import train_test_split

os.chdir('D:/kenkyu/inputdata')
os.getcwd()

graph_featurizer = dc.feat.graph_features.ConvMolFeaturizer()
loader = dc.data.data_loader.CSVLoader( tasks = ['V'], smiles_field = "Smiles", featurizer = graph_featurizer )
dataset = loader.featurize( 'deepdata.csv' )

splitter = dc.splits.splitters.RandomSplitter()

train, valid, _ = splitter.train_valid_test_split(dataset,
                                                  frac_train=0.7,
                                                  frac_valid=0.29,
                                                  frac_test=0.01)
normalizer = deepchem.trans.NormalizationTransformer(transform_y=True, 
                                                     dataset=train, 
                                                     move_mean=True)
train = normalizer.transform(train)
test = normalizer.transform(valid)


from deepchem.models import GraphConvModel
graph_conv = GraphConvModel(1,
                            batch_size=50,
                            mode="regression")
                            
metric = deepchem.metrics.Metric(deepchem.metrics.pearson_r2_score)
graph_conv.fit(train, nb_epoch=10)
graph_conv.fit(train, nb_epoch=10)
train_scores = graph_conv.evaluate(train, [metric], [normalizer])
valid_scores = graph_conv.evaluate(valid, [metric], [normalizer])



