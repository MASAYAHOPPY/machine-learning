from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import RandomForestClassifier

search_params = {
     'n_estimators'      : [5, 10, 20, 30, 50, 100, 300],
      'max_features'      : [3, 5, 10, 15, 20],
      'random_state'      : [2525],
      'n_jobs'            : [1],
      'min_samples_split' : [3, 5, 10, 15, 20, 25, 30, 40, 50, 100],
      'max_depth'         : [3, 5, 10, 15, 20, 25, 30, 40, 50, 100]
}
　#ラムダムフォレストのハイパーパラメータごとの最適条件探索


gs = GridSearchCV(RandomForestClassifier(),
                  search_params, 
                  cv=3,            
                  verbose=True,   
                  n_jobs=-1) 
              # 対象の機械学習モデル
              # 探索パラメタ辞書
              # クロスバリデーションの分割数
              # ログ表示
              # 並列処理
              
gs.fit(X_train, y_train)
print(gs.best_estimator_)

#fittingと出力→可視化

print('best score: {:0.3f}'.format(gs.score(X_test, y_test)))
print('best params: {}'.format(gs.best_params_))
print('best val score:  {:0.3f}'.format(gs.best_score_))

＞＞＞＞＞＞＞＞＞＞＞＞＞
[out]
best score: 0.956
best params: {'max_depth': 2, 'min_samples_leaf': 1}
best val score:  0.955
＞＞＞＞＞＞＞＞＞＞＞＞＞

import pandas as  pd
import seaborn as sns
%matplotlib inline

cv_result = pd.DataFrame(rs.cv_results_)
cv_result = cv_result[['param_max_depth', 'param_min_samples_leaf', 'mean_test_score']]
cv_result_pivot = cv_result.pivot_table('mean_test_score', 'param_max_depth', 'param_min_samples_leaf')

heat_map = sns.heatmap(cv_result_pivot, cmap='Greys', annot=True);
