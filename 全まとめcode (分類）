import os
import numpy as np
import numpy.random as random
import scipy as sp
import pandas as pd
from pandas import Series, DataFrame
from sklearn.model_selection import train_test_split

os.chdir('D:/kenkyu/Padeldata54010/')
os.getcwd()
df = pd.read_excel('inputdata.xlsx')

df.drop(['T4','T3','T2','T1'], axis=1,inplace=True)
df.isnull().sum()
df.dropna(inplace = True)
df.isnull().sum()

X = df.drop('BV', axis=1)
Y = df['BV']
X=X.astype('str')
Y=Y.astype('str')
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.3, random_state=0)


#＜k-近傍法（k-NN）＞
from sklearn.neighbors import KNeighborsClassifier
model = KNeighborsClassifier(n_neighbors=3)
model.fit(X_train, y_train)
print("train score:",model.score(X_train,y_train))
print("test score:",model.score(X_test,y_test))
y_pred = model.predict(X_test)
from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred))

#＜ラムダムフォレスト＞
from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier(max_depth=30, n_estimators=30, random_state=42)
model.fit(X_train, y_train)
print("train score:",model.score(X_train,y_train))
print("test score:",model.score(X_test,y_test))
y_pred = model.predict(X_test)
from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred))

#＜サポートベクターマシン（SVM）＞
from sklearn.svm import LinearSVC
model = LinearSVC()
model.fit(X_train, y_train)
print("train score:",model.score(X_train,y_train))
print("test score:",model.score(X_test,y_test))
y_pred = model.predict(X_test)
from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred))

#＜ロジスティック回帰＞
from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(X_train, y_train)
print("train score:",model.score(X_train,y_train))
print("test score:",model.score(X_test,y_test))
y_pred = model.predict(X_test)
from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred))

#＜決定木＞
from sklearn.tree import DecisionTreeClassifier
model = DecisionTreeClassifier(max_depth=3)
model.fit(X_train, y_train)
print("train score:",model.score(X_train,y_train))
print("test score:",model.score(X_test,y_test))
y_pred = model.predict(X_test)
from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred))

＜混同行列＞
y_pred = model.predict(X_test)
from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred))

  
#重要度 modelの名前注意
importance = pd.DataFrame({ 'descripter' :X_train.columns, 'importance' :model.feature_importances_})
importance
importance.to_csv("importance.csv", sep=",")

＜新データ予測＞
import csv

df2 = pd.read_excel('predict.xlsx')
df2.isnull().sum()
df2.dropna(inplace = True)
df2.isnull().sum()

df2 = df2.astype('str')
y_pred2 = model.predict(df2)

c=y_pred2
with open('test.csv','w') as f:
 writer = csv.writer(f)
 writer.writerows(c)
#
csv読み込み
cをy_predとする。
test.csvをfと定義
fをWriterで定義
Writerの行にcを定義
※スペース注意
