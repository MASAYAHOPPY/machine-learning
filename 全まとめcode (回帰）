＜回帰モデル＞
import os
import numpy as np
import numpy.random as random
import scipy as sp
import pandas as pd
from pandas import Series, DataFrame
from sklearn.model_selection import train_test_split
os.chdir('D:/kenkyu/HOMOLUMO')
os.getcwd()
df = pd.read_excel('AP.xlsx')
df.dropna(inplace = True)
df.isnull().sum()
X = df.drop('HOMOLUMO', axis=1)
Y = df['HOMOLUMO']
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.3, random_state=0)

import sklearn
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score

# 残差プロット
# 縦軸：トレーニング実測値-トレーニング推定値　横軸：トレーニング推定値
# 縦軸：テスト実測値-テスト推定値　横軸：テスト推定値

＜決定木＞
from sklearn.tree import DecisionTreeRegressor
model = DecisionTreeRegressor()
model.fit(X_train, y_train)

＜ラムダムフォレスト＞
from sklearn.ensemble import RandomForestRegressor
model = RandomForestRegressor()
model.fit(X_train, y_train)

＜ラッソ回帰＞
from sklearn.linear_model import Lasso
model = Lasso()
model.fit(X_train, y_train)

＜Elastic Net Regressor＞
from sklearn.linear_model import ElasticNet
model = ElasticNet()
model.fit(X_train, y_train)

＜リッジ回帰＞
from sklearn.linear_model import Ridge
model = Ridge()
model.fit(X_train, y_train)

＜BaggingRegressor＞
from sklearn.ensemble import BaggingRegressor
model = BaggingRegressor()
model.fit(X_train, y_train)

＜AdaBoostRegressor＞
from sklearn.ensemble import AdaBoostRegressor
model = AdaBoostRegressor()
model.fit(X_train, y_train)

＜GradientBoostingRegressor＞
from sklearn.ensemble import GradientBoostingRegressor
model = GradientBoostingRegressor()
model.fit(X_train, y_train)

y_train_pred = model.predict(X_train)
y_test_pred = model.predict(X_test)
print('MSE train : %.3f, test : %.3f' % (mean_squared_error(y_train, y_train_pred), mean_squared_error(y_test, y_test_pred)) )
print('R2 train : %.3f, test : %.3f' % (r2_score(y_train, y_train_pred), r2_score(y_test, y_test_pred)) )


%matplotlib inline
import matplotlib.pyplot as plt
plt.figure(figsize = (10, 7))
plt.scatter(y_train_pred, y_train_pred - y_train, c = 'green', marker = 'o', s = 35, alpha = 0.5, label = 'Training data')
plt.scatter(y_test_pred, y_test_pred - y_test, c = 'blue', marker = 's', s = 35, alpha = 0.7, label = 'Test data')
plt.xlabel('Predicted values')
plt.ylabel('Residuals')
plt.legend(loc = 'upper left')
plt.hlines(y = 0, xmin = -10, xmax = 50, lw = 2, color = 'red')
plt.xlim([-10, 50])
plt.show()
