import os
import numpy as np
import numpy.random as random
import scipy as sp
import pandas as pd
from pandas import Series, DataFrame
from sklearn.model_selection import train_test_split
os.chdir('C:/Users/otyaz/OneDrive/Data')
os.getcwd()
df = pd.read_excel('test1.xlsx')

df.isnull().sum()
df.dropna(axis = 'columns')
df.dropna(inplace = True)
df.isnull().sum()

X = df.drop('Symmetry group', axis=1)
Y = df['Symmetry group']
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.3, random_state=0)

＜ラムダムフォレスト＞

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score

rfr = RandomForestRegressor(n_estimators=100)
rfr.fit(X_train, y_train)
predict_y = rfr.predict(X_test)
r2_score = r2_score(y_test, predict_y)
print(r2_score)

y_train_pred = rfr.predict(X_train)
y_test_pred = rfr.predict(X_test)

# MSEの計算
from sklearn.metrics import mean_squared_error
print('MSE train : %.3f, test : %.3f' % (mean_squared_error(y_train, y_train_pred), mean_squared_error(y_test, y_test_pred)) )
 
# R^2の計算
from sklearn.metrics import r2_score
print('MSE train : %.3f, test : %.3f' % (r2_score(y_train, y_train_pred), r2_score(y_test, y_test_pred))

# 残差プロット
plt.figure(figsize = (10, 7))
plt.scatter(y_train_pred, y_train_pred - y_train, c = 'green', marker = 'o', s = 35, alpha = 0.5, label = 'Training data')
plt.scatter(y_test_pred, y_test_pred - y_test, c = 'blue', marker = 's', s = 35, alpha = 0.7, label = 'Test data')
plt.xlabel('Predicted values')
plt.ylabel('Residuals')
plt.legend(loc = 'upper left')
plt.hlines(y = 0, xmin = -10, xmax = 50, lw = 2, color = 'red')
plt.xlim([-10, 50])
plt.show()
